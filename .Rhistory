f(7)
open.account <- function(total) {
list(
deposit = function(amount) {
if(amount <= 0)
stop("Deposits must be positive!\n")
total <<- total + amount
cat(amount, "deposited.  Your balance is", total, "\n\n")
},
withdraw = function(amount) {
if(amount > total)
stop("You don't have that much money!\n")
total <<- total - amount
cat(amount, "withdrawn.  Your balance is", total, "\n\n")
},
balance = function() {
cat("Your balance is", total, "\n\n")
}
)
}
open.account(100)
ross<- open.account(100)
ross
ross<- open.account(deposit = 100)
ross<- open.account(deposit = 100)
ross<- open.account(100)
ross$withdraw
ross$withdraw(30)
robert<- open.account(200)
ross$balance
robert$balance
ross$deposit(50)
vector<- c(9,3,5,4,2,5,6,8,9,4,3)
makeVector <- function (x=numeric()){
m<- NULL
set<- function(y){
x<<-y
m<<- NULL
}
get<- function() x
setmean<- function(mean) m <<- mean
getmean <- function() m
list(set=set, get=get,
setmean = setmean,
getmean = getmean)
}
makeVector(vector)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(vector)
cachemean(vector$getmean)
cachemean(x$getmean)
vector$getmean
makeV <-makeVector(vector)
makeV$getmean
makeV$get
makeV$getmean(5)
makeV$getmean(5)
makeV$get
mapply(rep, 1:4, 4:1, SIMPLIFY = TRUE)
?gl
rm(list=ls())
library(datasets)
data(iris)
?iris
head(iris)
iris_specieslevel<- split(iris, 3, $Species)
iris_specieslevel<- split(iris$Species, 3)
iris_specieslevel
iris_virginica<- iris[$Species = virginica]
iris_virginica<- iris$Species = virginica
iris_virginica<- data.frame()
if (iris$Species = virginica){
iris_virginica<- [,]
}
iris_virginica<- data.frame()
if (iris$Species == virginica){
iris_virginica<- [,]
}
if (iris$Species == virginica){
iris_virginica
}
iris_virginica<- iris$Species = virginica
iris_virginica<- data.frame()
if (iris$Species == "virginica"){
iris_virginica
}
iris_virginica<- data.frame(iris$Species = "virginica")
iris_virginica<- data.frame(iris$Species == "virginica")
iris_virginica
iris_virginica<- data.frame(iris[iris$Species == "virginica"])
iris_virginica<- data.frame(iris[,iris$Species == "virginica"])
iris_virginica<- data.frame(iris[,iris$Species == "virginica"])
iris_virginica<- data.frame(iris$Species == "virginica")
iris_virg_subset<- iris[iris_virginica]
iris_virg_subset<- iris[,iris_virginica]
?split
iris_virginica<- iris$Species
l<- split(iris, iris_virginica)
?sapply
?split
m<-sapply(l, mean)
l
?tapply
m<- tapply(l, mean)
m<- tapply(l, as.factor, mean)
m<- tapply(l, l$Sepal.Length, mean)
?apply
m<- apply(l, 2, mean)
?colMeans
m<-colMeans(l, na.rm = T)
l
m<-colMeans(l$virginica, na.rm = T)
m<- apply(l$virginica, 2, mean)
?split
s<- sapply(l$virginica, mean)
?sapply
l$virginica
sapply(l$virginica, colMean, simplify = TRUE, USE.NAMES = TRUE)
sapply(l$virginica, colMeans, simplify = TRUE, USE.NAMES = TRUE)
str(l$virginica)
virginica<-l$virginica
str(virginica)
?colMeans
colMeans(virginica)
vir_mean <- mean(virginica$"Sepal.Length")
vir_mean
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
str(apply(iris[, 1:4], 2, mean))
b<-apply(iris[, 1:4], 2, mean)
class(b)
colMeans(iris)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
cyl_split <- split(mtcars$cyl)
?split
cyl_split <- split(mtcars, "cyl")
cyl_split
g<- mtcars$cyl
l<- split(mtcars, g)
l
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
w<-with(mtcars, tapply(hp, cyl, mean))
(w$8-w$4)
209.21429-82.63636
library(iris)
?iris
load(iris)
load("iris")
source(iris)
library("iris")
source("iris")
iris
Species_split <- split(iris, "Species")
Species_split
Species_split <- split(iris, Species)
Species_split <- split(iris, [,5])
?split
Spec_names <- iris$Species
Species_split <- split(iris, Species_names)
Species_split <- split(iris, Spec_names)
l<- split(iris, iris$Species)
l
x<- lapply(Species_split, mean, "Petal.Width")
x<- lapply(Species_split$virginica, mean, "Petal.Width")
x<- lapply(Species_split$virginica, mean, Petal.Width)
x<- lapply(Species_split$virginica, mean, $Petal.Width)
x<- lapply(Species_split$virginica, mean, Species_split$Petal.Width)
?lapply
x<- lapply(Species_split$virginica, mean)
x<- lapply(Species_split$virginica, mean, 2)
x<- sapply(Species_split$virginica, mean, USE.NAMES = T)
?tapply
x<- tapply(Species_split$virginica, "Sepal.Length", mean)
x<- tapply(Species_split$virginica, Petal.Width, mean)
x<- tapply(Species_split$virginica, $Petal.Width, mean)
x<- tapply(Species_split$virginica, "Petal.Width", mean)
x<- tapply(Species_split$virginica, Species_split$virginica$Petal.Width, mean)
library(swirl)
swirl()
5+7
x<- 5+7
x
y<- x-3
y
z<- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z *2 +100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
z *2 +1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- /Users/crobinson
old.dir <- dir()
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
files.exists("mytest.R")
files.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(./"testdir2"/"testdir3")
dir.create("."/"testdir2"/"testdir3")
dir.create(testdir2"/"testdir3")
dir.create("testdir2"/"testdir3")
file.path("testdir2"/ "testdir3")
file.path("testdir2", "testdir3")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("User/crobinson")
setwd(old.dir)
unlink("testdir/", recursive = TRUE)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
15:1
?`"`"
s
`
""
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq<- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
rm(lists=ls())
rm(list=ls())
getwd()
setwd"/Users/crobinson//R"
setwd"/Users/crobinson/R"
setwd("/Users/crobinson/R")
setwd("/Users/crobinson//R")
setwd("/Users/crobinson/")
setwd("/Users/crobinson/Desktop/R/")
getfiles()
?files
?dir
list.files
list.files()
setwd("/Users/crobinson//Dropbox (IGS)/my_documents/General/Coursera/R_programming/assignment_1/")
list.files()
vect<- 1:30
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(vect)
cachemean(vect)
vect$getmean
makeVector$getmean
makeVector$get
cachemean$get
cachemean(vect)
m<- makeVector
m$get(vect)
m$get()
m$get(5)
m$set(5)
vect$set
m$get(vect)
a<- makeVector(vect)
a$get()
a$mean
a$set(vect)
a$get()
a$setmean(vect)
a$getmean()
cachemean(a)
rm(list=ls())
vect1<- 1:30
vect2<- 10:120
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<- makeVector(vect1)
a$get()
a$set(vect2)
a$get()
a$getmean()
a$getmean(vect1)
a$setmean(vect1)
a$getmean()
cachemean (a)
a$getmean()
a$setmeant()
a$setmean()
cachemean(a)
m
vect1<- c(1,2,3,4,5)
vect2<- c(6,7,8,9,10)
a<- makeVector(vect1)
a$set
a$get
a$set(vect1)
a$get(vect1)
a$get()
a$setmean(vect1)
a$getmean()
cachemean(a)
a$getmean()
vect1<- c(1,2.5,3,4,5)
a<- makeVector(vect1)
a$setmean(vect1)
a$getmean()
cachemean(a)
makeVector(a)
cachemean(a)
a$getmean
a$getmean(vect1)
a$getmean()
cachemean(a)
rm(list=ls())
vect1<- c(1,2.5,3,4,5)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector(vect1)
a$getmean()
cachemean(a)
?inverse.gaussian
?inverse.rle
?solve
makeMatrix <- function(x = numeric()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheinverse <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
m<- matrix(c(3,7,5,9), nrow = 2, ncol = 2)
m
a<- makeMatrix(m)
cacheinverse(m)
cacheinverse(a)
makeMatrix <- function(x = numeric()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
m<- matrix(c(3,7,5,9), nrow = 2, ncol = 2)
a<- makeMatrix(m)
cacheinverse(a)
m<- matrix(c(-1,-2,1,1), 2,2)
a<- makeMatrix(m)
a$get()
cacheinverse(s)
cacheinverse(a)
inv<- cacheinverse(a)
inv
git
setwd ("..")
setwd ("ProgrammingAssignment2/")
list.files()
m<- matrix(c(-1,-2,1,1), 2,2)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL ##i indicates inverse of matrix
set <- function(y) { #sets the function
x <<- y
i <<- NULL
}
get <- function() x # returns function
setinverse <- function(solve) i <<- solve #calculates inverse
getinverse <- function() i #returns inverse
list(set = set, get = get, ##list that caches these 4 elements
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) { #searching if the inverse is already stored
message("getting cached data")
return(i)
}
data <- x$get() #if inverse was NULL, calculates the inverse of the matrix
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(m)
a <- makeCacheMatrix(m)
cacheSolve(a)
